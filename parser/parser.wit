// TODO: incremental parsing

/// A parser midway through parsing.
resource parser {
    /// Create an instance of the parser.
    new: func() -> parser
    /// Feeds a chunk of data into the parser and returns a list of definitions from that chunk.
    ///
    /// Returning `none` indicates the end of the component.
    feed: func(data: list<u8>) -> expected<option<list<definition>>, error>
}

/// An error returned from the parser.
variant error {
    /// The component was invalid.
    parse-error(parse-error),
    /// The passed data was a wasm module, not a component.
    not-a-component,
}

/// An error which occurs as a result of an invalid component.
record parse-error {
    /// The error's message.
    message: string,
    /// The offset in the wasm binary where the error occurred.
    // Note: this is wasm, so a usize is 32 bits.
    offset: u32,
}

/// A WebAssembly component.
record component {
    /// All of the core modules available in the component.
    modules: list<module>,
    /// All of the core instances available in the component.
    core-instances: list<core-instance>,
    /// All of the core functions available in the component.
    core-funcs: list<core-func>,
    /// All of the core tables that we've aliased.
    tables: list<core-export>,
    /// All of the core memories that we've aliased.
    memories: list<core-export>,
    /// All of the core globals that we've aliased.
    globals: list<core-export>,
    /// Storage for nested types.
    types: list<deftype>,
    /// All of the functions available in the component.
    funcs: list<%func>,
    /// The exports of the component.
    exports: list<export>,
}

/// A module in a component.
variant module {
    /// An imported module, imported with the contained name.
    imported(string),
    /// An inline module, consisting of the contained raw bytes.
    inline(list<u8>),
}

/// A core instance.
///
/// This can either be an actual instantiation of a core module, or just a
/// grouping of core functions that make up the 'exports' of the module.
variant core-instance {
    /// An instance created by instantiating a module.
    module(module-instance),
    /// An 'instance' which just reexports things from other instances.
    reexporter(list<core-reexport>),
}

/// A core instance created by instantiating a module with a set of imports.
record module-instance {
    /// The index of the module to be instantiated.
    module: u32,
    /// The arguments to instantiate the module with.
    args: list<core-instantiate-arg>,
}

/// An argument when instantiating a core module.
///
/// Each argument defines the instance which is referenced when writing
/// `(import <name> "...")`.
record core-instantiate-arg {
    /// The namespace being provided.
    name: string,
    /// The index of the instance which provides this namespace.
    instance: u32,
}

/// A core export defined as part of a reexporting core instance.
record core-reexport {
    /// The name of the export.
    name: string,
    /// What sort of export it is.
    sort: core-sort,
    /// The index of the thing to be exported in the index space of the sort
    /// that it is.
    index: u32,
}

/// A sort of thing that a core export/import can be.
enum core-sort {
    /// A function.
    %func,
    /// A table.
    table,
    /// A memory.
    memory,
    /// A global.
    global,
    // These three aren't allowed yet, but the spec defines them in case the
    // type imports proposal and module linking proposal become a thing.
    // %type,
    // module,
    // instance,
}

variant core-func {
    /// A core function aliased from a module.
    aliased(core-export),
    /// A core function lowered from a component function.
    lowered(lowered-func),
}

/// A core function lowered from a component function.
record lowered-func {
    /// The index of the component function this is lowered from.
    %func: u32,
    /// The type of the function we're lowering from.
    ty: func-type,
    /// The options specified for how to lower this function.
    options: canon-opts,
}

/// The type of a component function.
///
/// This also contains extra annotations about how the function should be
/// lifted/lowered.
record func-type {
    /// The parameters of the function.
    params: list<annotated-valtype>,
    /// The result of the function.
    result: annotated-valtype,
    /// Whether the arguments will be passed as core WebAssembly arguments
    /// rather than on the stack.
    flat-params: bool,
    /// Whether the result will be passed as core WebAssembly results rather
    /// than on the stack.
    flat-result: bool,
}

/// A primitive value type.
enum primtype {
    /// The unit type.
    %unit,
    /// A boolean.
    %bool,
    /// An 8-bit signed integer.
    %s8,
    /// An 8-bit unsigned integer.
    %u8,
    /// A 16-bit signed integer.
    %s16,
    /// A 16-bit unsigned integer.
    %u16,
    /// A 32-bit signed integer.
    %s32,
    /// A 32-bit unsigned integer.
    %u32,
    /// A 64-bit signed integer.
    %s64,
    /// A 64-bit unsigned integer.
    %u64,
    /// A 32-bit floating point number.
    %float32,
    /// A 64-bit floating point number.
    %float64,
    /// A Unicode character (more specifically, a Unicode Scalar Value).
    %char,
    /// A string.
    %string,
}

/// The type of a value.
variant valtype {
    /// The type at the contained index.
    ///
    /// Note that this index can be an index into one of two places - if this
    /// is contained in an `annotated-valtype`, it's an index into the
    /// `annotated-types` field of `component`, otherwise it's an index into
    /// the `types` field.
    idx(u32),
    /// A primitive type.
    primitive(primtype),
}

/// A user-defined type.
variant deftype {
    /// A primitive type.
    primitive(primtype),
    // record,
    // variant,
    // list,
    // tuple,
    // flags,
    // enum,
    // union,
    // option,
    // expected,
}

/// The type of a value, annotated with info on how it should be lifted/lowered.
record annotated-valtype {
    /// The offset at which this type should be lowered/lifted.
    ///
    /// If using flat params/results, this is the index of the first param/result
    /// that is part of this type.
    ///
    /// If lowering/lifting using the stack, this is the offset in memory of
    /// the type.
    offset: u32,
    /// The inner type.
    ty: valtype,
}

/// A user-defined type, annotated with info on how it should be lifted/lowered.
record annotated-deftype {
    /// The offset at which this type should be lowered/lifted.
    ///
    /// If using flat params/results, this is the index of the first param/result
    /// that is part of this type.
    ///
    /// If lowering/lifting using the stack, this is the offset in memory of
    /// the type.
    offset: u32,
    /// The inner type.
    ty: deftype,
}

enum string-encoding {
    utf8,
    utf16,
    latin1-or-utf16
}

/// Options passed to a `canon lower` / `canon lift` operation.
record canon-opts {
    /// The encoding that the function to be lifted uses for strings.
    string-encoding: string-encoding,
    /// The index of the memory that should be used to load and store values.
    memory: option<u32>,
    /// The index of the `realloc` function to be used to allocate space for
    /// values.
    realloc: option<u32>,
    /// The index of the `post-return` function, which should be called after
    /// the core function has returned and its results have been lifted, with
    /// the results of the core function as its parameters.
    post-return: option<u32>,
}

/// An export of a core instance.
record core-export {
    /// The index of the instance it's an export of.
    instance: u32,
    /// The name of the export.
    name: string,
}

/// A component function.
variant %func {
    /// A component function imported with the contained name.
    imported(string),
    /// A component function lifted from a core function.
    lifted(lifted-func),
    // in future there'll be another variant for aliased functions
}

/// A component function lifted from a core function.
record lifted-func {
    /// The index of the core function this is lifted from.
    core-func: u32,
    /// The type of the function.
    ty: func-type,
    /// The options specified for how to lift this function.
    options: canon-opts,
}

/// A component export.
record export {
    /// The name of the export.
    name: string,
    /// The sort of thing being exported (value, function, etc.)
    sort: sort,
    /// The index of the thing being exported in the index space of its sort.
    index: u32,
}

/// A sort of thing to be exported.
enum sort {
    /// A core module.
    module,
    /// A function.
    %func,
    // value,
    // type,
    // component,
    // instance,
}

// We're not using this stuff right now but we might need it later.

/// A component import.
// record import {
//     /// The name of the import.
//     name: string,
//     /// The description of the thing to be imported.
//     ///
//     /// Basically the import's type, except that functions, modules etc. are
//     /// allowed as well as values.
//     desc: importdesc,
// }

/// A description of a thing to be imported.
// variant importdesc {
//     /// A core module, whose type has the contained index.
//     core-module(u32),
//     // /// A function whose type has the contained index.
//     // %func(u32),
//     // value,
//     // type,
//     // instance,
//     // component,
// }
